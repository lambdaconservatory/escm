.\" Automatically generated by Pod::Man v1.37, Pod::Parser v1.14
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sh \" Subsection heading
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  | will give a
.\" real vertical bar.  \*(C+ will give a nicer C++.  Capital omega is used to
.\" do unbreakable dashes and therefore won't be available.  \*(C` and \*(C'
.\" expand to `' in nroff, nothing in troff, for use with C<>.
.tr \(*W-|\(bv\*(Tr
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.Sh), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.if \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.\"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.hy 0
.if n .na
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "AESCM 1"
.TH AESCM 1 "2004-10-15" "" ""
.SH "NAME"
aescm \-\- preprocess embedded Scheme code in documents
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
\&\fBaescm\fR \fI[\s-1OPTION\s0]\fR ... \fI\s-1FILE\s0\fR ...
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
\&\fBAescm\fR is a filter program
to preprocess embedded Scheme code in documents.
Scheme code between \f(CW\*(C`<?scm\*(C'\fR and \f(CW\*(C`?>\*(C'\fR is evaluated
and replaced with what is written to
\&\f(CW\*(C`(current\-output\-port)\*(C'\fR while the evaluation.
An expression between \f(CW\*(C`<?scm:d\*(C'\fR and \f(CW\*(C`?>\*(C'\fR is evaluated
and replaced with its result.
The sharp-bang line and the meta-argument lines (if any)
of a script are skipped.
.PP
The body of \fBaescm\fR is a simple converter
from a text to Scheme code,
which will be evaluated by a backend Scheme interpreter.
It works with most implementations.
.Sh "\s-1OPTIONS\s0"
.IX Subsection "OPTIONS"
.IP "\-E, \-\-no\-eval" 2
.IX Item "-E, --no-eval"
Preprocess files and convert them into a Scheme program.
.IP "\-e, \-\-eval=EXPR" 2
.IX Item "-e, --eval=EXPR"
Evaluate an expression before processing files.
You can use this option upto 16 times.
.IP "\-i, \-\-interp='\s-1PROG\s0 \s-1ARG\s0 ...'" 2
.IX Item "-i, --interp='PROG ARG ...'"
Specify the interpreter with its arguments.
.IP "\-l, \-\-language \s-1LANG\s0" 2
.IX Item "-l, --language LANG"
Specify the interpreter language to be used.
This option is valid
if the tool has been configured with
\&\f(CW\*(C`\-\-enable\-polyglot\*(C'\fR option.
.IP "\-o" 2
.IX Item "-o"
Specify the output file.
.IP "\-\-help" 2
.IX Item "--help"
Print a short help message.
.IP "\-\-version" 2
.IX Item "--version"
Print version information.
.Sh "\s-1SCHEME\s0 \s-1VARIABLES\s0"
.IX Subsection "SCHEME VARIABLES"
Naming convention can be changed by a language configuration file.
For example, \f(CW\*(C`*escm\-input\-file*\*(C'\fR is used if the identifer record is
\&\fB*lisp*\fR,
while it is changed to \f(CW\*(C`EscmInputFile\*(C'\fR if the record is \fBTitle\fR,
\&\f(CW\*(C`ESCM_INPUT_FILE\*(C'\fR if \fB\s-1UPPER\s0\fR,
and
\&\f(CW\*(C`escm_input_file\*(C'\fR if \fBlower\fR.
The last one is the default.
.IP "*escm-input-file*" 2
.IX Item "*escm-input-file*"
The name of the file which the tool is currently processing.
The value is false if the input is stdin.
.IP "*escm-output-file*" 2
.IX Item "*escm-output-file*"
The name of the output file.
It is false if the output is stdout.
.IP "*escm-interpreter*" 2
.IX Item "*escm-interpreter*"
The Scheme interpreter and its arguments.
.IP "*escm-version*" 2
.IX Item "*escm-version*"
The name and the version of this project.
.Sh "\s-1ENVIRONMENT\s0 \s-1VARIABLES\s0"
.IX Subsection "ENVIRONMENT VARIABLES"
.IP "\s-1ESCM_DEFAULT\s0" 2
.IX Item "ESCM_DEFAULT"
The default interpreter language.
.IP "\s-1ESCM_BACKEND\s0" 2
.IX Item "ESCM_BACKEND"
The default backend interpreter.
.Sh "\s-1OTHER\s0 \s-1INTERPRETER\s0 \s-1LANGUAGES\s0"
.IX Subsection "OTHER INTERPRETER LANGUAGES"
\&\fBAescm\fR
is designed to be interpreter independent.
This does not mean Scheme interpreter independent.
You can also embed code of most interpreter languages,
e.g. Awk, Csh, Common Lisp, Perl, Python, Ruby, Sh, Tcl.
But you can use this feature
only when you have run \f(CW\*(C`configure\*(C'\fR script with \f(CW\*(C`\-\-enable\-polyglot\*(C'\fR option.
.SH "CAVEATS"
.IX Header "CAVEATS"
.IP "* \fBAescm\fR is developers' version of \fBescm\fR. The stable version is still \fBescm 1.1\fR." 2
.IX Item "Aescm is developers' version of escm. The stable version is still escm 1.1."
.PD 0
.IP "* \fBAescm\fR may generate a very long string. Make it sure that your interpreter might not have buffer overflow bugs." 2
.IX Item "Aescm may generate a very long string. Make it sure that your interpreter might not have buffer overflow bugs."
.IP "* A document written in a multibyte character set may not be correctly processed by an interpreter which may convert character sets." 2
.IX Item "A document written in a multibyte character set may not be correctly processed by an interpreter which may convert character sets."
.PD
.SH "CHANGES"
.IX Header "CHANGES"
.Sh "Syntax"
.IX Subsection "Syntax"
The experimental version has adopted the \s-1XML\s0 syntax for a preprocessor
as \fBeguile\fR did
and eliminated the archaic one
with \f(CW\*(C`<?\*(C'\fR, \f(CW\*(C`<?=\*(C'\fR and \f(CW\*(C`!>\*(C'\fR.
.Sh "File Arguments"
.IX Subsection "File Arguments"
As many files as you specified are to be processed.
The stable version processes only the first one.
.Sh "\s-1CGI\s0"
.IX Subsection "CGI"
\&\s-1CGI\s0 features have been removed since \fBaescm\fR version 0.27.
You can use \fBaescm.cgi\fR in the sharp-bang line of
\&\s-1CGI\s0 scripts or as a handler \s-1CGI\s0 program.
.SH "AUTHOR"
.IX Header "AUTHOR"
.Vb 2
\&  Shiro Kawai  -- the original and stable escm
\&  TAGA Yoshitaka, tagga@tsuda.ac.jp
.Ve
.SH "SEE ALSO"
.IX Header "SEE ALSO"
\&\fBescm 1.1\fR (<http://www.shiro.dreamhost.com/scheme/vault/escm.html>),
\&\fBeguile\fR (<http://woozle.org/~neale/src/eguile/>),
\&\fBbrl\fR (<http://brl.sourceforge.net/>),
\&\fBscsh\fR (<http://scsh.sourceforge.net/>),
\&\fBguile\fR,
\&\fBgosh\fR,
