<?xml version="1.0"?><!-- -*- xml -*- -->
<!-- $Id$ -->
<!DOCTYPE html
     PUBLIC  "-//W3C//DTD XHTML 1.1//EN"
     "DTD/xhtml11-flat.dtd">
<html>
  <head>
    <title>Gimmick Feature</title>
    <meta http-equiv="Content-Type" content="text/html" />
    <link href="aescm.css" type="text/css" rel="stylesheet" />
    <?xml-stylesheet type="text/css" href="aescm.css"?>
  </head>
  <?scm (load (string-append *pwd* "/config-h.scm"))
        (load (string-append *pwd* "/helper.scm"))?>
  <body>
    <h1>Gimmick Feature</h1>
    <address>TAGA Yoshitaka
&lt;<?scm:d (link-mail PACKAGE_BUGREPORT)?>&gt;</address>
    <p>
<em><?scm:d (string-titlecase PACKAGE)?></em>
is designed to be interpreter independent.
This does not mean Scheme interpreter independent.
You can embed code of most interpreter languages.
But this feature is enabled only when you has run <em>configure</em>
script with <code>-with-gimmick</code> option.
If you find description on <code>-l</code> option
in the help message shown by <code>-h</code>, this feature is on.</p>

    <p>
Languages you can embed must satisfy the following conditions:
</p>
    <ol>
      <li>Strings are bracketted between two <em>&quot;</em>s.
In them, <em>\\</em> is treated as <em>\</em>,
<em>\&quot;</em> as <em>&quot;</em>,
and <em>\n</em> as <em>newline</em>.
It does not have the upper limit of the length of strings.</li>
      <li>It has a procedure to write out objects without adding
<em>newline</em>.</li>
      <li>It has a way to print out the external expressions
of any objects other than strings.</li>
      <li>Commands are processed in order.</li>
    </ol>
    <p>
Information on your interpreter language is read
from a simple configuratioon file, about a dozen of lines at most.
This distribution comes with the configuration files for
<a href="../src/lang/awk">Awk</a>,
<a href="../src/lang/csh">Csh</a>,
<a href="../src/lang/perl">Perl</a>,
<a href="../src/lang/python">Python</a>,
<a href="../src/lang/ruby">Ruby</a>,
<a href="../src/lang/scheme">Scheme</a>,
<a href="../src/lang/sh">Sh</a>,
and
<a href="../src/lang/tcl">Tcl</a>.
They are stored in <code>$(pkgdatadir)/lang</code>
(maybe in <code>/usr/local/share/<?scm:d PACKAGE?>/lang/</code>).
</p>

    <h2>File format</h2>
    <p>Here is the most comlicated and longest configuration file.
This is for <em>Awk</em>.

    <blockquote>
      <pre><?scm:d (escape-html
"# configurations for the Awk language
<?awk:d ...?>
# command
awk -f /dev/stdin
# initialization
BEGIN {
# nil
0
# assign
variable_name = value;
# string
printf \"string\";
# expression
printf (expression);
# finalization
 exit;
}
")?></pre>
    </blockquote>
    <h3>File Size</h3>
    <p>The size of configuration files must be less than
511 Bytes.</p>
    <h3>Leading Character and Namespace</h3>
    <p>
The first character of a configuration file is the leading character.
A line beginning with this character is used to separate records.
It will be convenient if it is the comment character
of your favorite interpreter language.</p>
    <p>
You must specify the namespace and the subnamespace for display mode
in the second line as
<q>&lt;?<em>namesapace</em>:<em>subnamespace</em> ...&gt;</q>.
</p>
    <h3>Other Records</h3>
    <p>The first line of a record starts with the leading character.
The first line's second field is the keyword for the record.
Following lines are data themselves.</p>
    <p>These are the keywords:</p>
    <ul>
      <li><a href="#command">command</a></li>
      <li><a href="#initialization">initialization</a></li>
      <li><a href="#nil">nil</a></li>
      <li><a href="#bind">bind</a></li>
      <li><a href="#assign">assign</a></li>
      <li><a href="#string">string</a></li>
      <li><a href="#expression">expression</a></li>
      <li><a href="#finalization">finalization</a></li>
    </ul>

    <h4 id="command">command</h4>
    <p>
The interpreter and its arguments.
See <a href="interpreter.html">the document of Scheme interpreters</a>
to decide the arguments.
But in most cases, your interpreter will need no arguments,
for it may be wise enough to switch to a batch mode
if stdin is a pipe.</p>

    <h4 id="initialization">intialization</h4>
    <p>
The initialization code.
This may has no lines.</p>

    <h4 id="nil">nil</h4>
    <p>The external representation of a value to be used
to show it is not a string.</p>

    <h4 id="bind">bind</h4>
    <p>How to bind a variable to a value.
The left side value is specified by <em>variable-name</em>
or <em>variable_name</em> depending on the convention of the language.
The right side value is specifed by <em>value</em>.</p>
    <p>At least one of this and <a href="#assign">assign</a> record
is required.</p>

    <h4 id="assign">assign</h4>
    <p>How to assign a variable to a value.
The left side value is specified by <em>variable-name</em>
or <em>variable_name</em> depending on the convention of the language.
The right side value is specifed by <em>value</em>.</p>
    <p>At least one of this and <a href="#bind">bind</a> record
is required.</p>

    <h4 id="string">string</h4>
    <p>
How to display a string.
You must write a form to display a string <em>&quot;string&quot;</em>.</p>

    <h4 id="expression">expression</h4>
    <p>
How to display an expression.
You must write a form to display an expression.
<em>expression</em> is used as keyword to show where it is placed.</p>

    <h4 id="finalization">finalization</h4>
    <p>
The finalization code.
This may has no lines.</p>

    <hr/>
    <div>
<?scm:d (sourceforge-logo)?>
</div>
  </body>
</html>
