<?xml version="1.0"?><!-- -*- xml -*- -->
<!-- $Id$ -->
<!DOCTYPE html
     PUBLIC  "-//W3C//DTD XHTML 1.1//EN"
     "DTD/xhtml11-flat.dtd">
<?scm (load "./config-h.scm")?>
<html xmlns="http://www.w3.org/1999/xhtml">
  <head>
    <title>Scheme Interpreters</title>
    <meta http-equiv="Content-Type" content="text/html" />
    <link href="aescm.css" type="text/css" rel="stylesheet" />
    <?xml-stylesheet type="text/css" href="aescm.css"?>
  </head>
  <body>
    <h1>Scheme Interpreters</h1>
    <address>TAGA Yoshitaka
&lt;<?scm:d (link-mail PACKAGE_BUGREPORT)?>&gt;</address>

    <p>The aim of this document to describe how to find out
right option arguments for a backend Scheme interpreter of
<em><?scm:d PACKAGE?></em>.
<em><?scm:d (string-titlecase PACKAGE)?></em>
is designed to be interpreter independent,
but it does not mean our tool works with any Scheme implementation.
As I show <a href="#list">below</a>, we can manage to with most interpreters.
Still you may have to specify option arguments either when you run
<em>configure</em> script as:</p>
    <blockquote>
      <pre><code>
<strong>$</strong> ./configure --with-backend=&quot;<em>guile -s /dev/stdin</em>&quot;
</code></pre>
    </blockquote>

    <p>or when you invoke script files such as:</p>

    <blockquote>
      <pre><code>
#!/usr/local/bin/aesm \
 -i "<em>guile -s /dev/stdin</em>"
&lt;html&gt; ...
</code></pre>
    </blockquote>

    <h2>Command Line Tests</h2>
    <p><em><?scm:d (string-titlecase PACKAGE)?></em>
invokes its backend interpreter
as a child process and sends Scheme code to it through a pipe.
The parent process brackets literal part
in <code>(display &quot;</code> and <code>&quot;)</code>
and the interpreter evalutes it and <q><code>display</code>s</q> it
to the default output port, that is, stdout.</p>

<p>Your interpreter need to have a <strong>batch</strong> mode.
This means it does not write the banner, prompts and results to stdout.
Most interpreters automatically suppress them
when the input port is not linked to a terminal
or it believes not.
A useful trick is to specify stdin (/dev/stdin) as script file.
</p>

    <p>Besides, your interpreter must work without
a user dependent initialization file.
<em><?scm:d (string-titlecase PACKAGE)?></em> may be used in CGI scripts
and then the defined environment variables are so different.</p>

    <p>These two tests will be useful:</p>
    <blockquote>
      <pre><code>
echo "(display \"string\")" | env -i <em>/usr/bin/guile -s /dev/stdin</em>
echo "\"string\"" | env -i <em>/usr/bin/guile -s /dev/stdin</em>
</code></pre>
    </blockquote>
    <p>Your specification works
if the first test shows <em>string</em> and the second nothing.</p>

    <h2 id="list">Interpreters and Arguments</h2>
    <p>Here is a list of Scheme interpretes I have checked.
Tests were done against my Linux box (RedHat Linux 7.3) and gcc (2.96).
Of course, this list is not exhaustive and
the results may be environment dependent.
Please inform <?scm:d (link-mail PACKAGE_BUGREPORT)?>
if you have any additions, corrections or advice.</p>
    <dl>
      <dt>Bigloo 2.5c</dt>
      <dd><blockquote>
	  <pre><code>bigloo -i /dev/stdin</code></pre>
	</blockquote></dd>
      <dt>Gambit-C 3.0</dt>
      <dd><blockquote>
	  <pre><code>gsi -</code></pre>
	</blockquote></dd>
      <dt>Gauche 0.7</dt>
      <dd><blockquote>
	  <pre><code>gosh -b</code></pre>
	</blockquote>
      <p>It works even without <code>-b</code>.
This interpreter is our default backend.</p></dd>
      <dt>Guile 1.3.4</dt>
      <dd><blockquote>
	  <pre><code>guile -s /dev/stdin</code></pre>
	</blockquote></dd>
      <dt>Ksi 3.4.1</dt>
      <dd><blockquote>
	  <pre><code>ksi</code></pre>
	</blockquote></dd>
      <dt>KSM-Scheme 0.3.2</dt>
      <dd><blockquote>
	  <pre>ksm /dev/stdin<code></code></pre>
	</blockquote></dd>
      <dt>Rep 0.15.1</dt>
      <dd><blockquote>
	  <pre>rep -s /dev/stdin<code></code></pre>
	</blockquote></dd>
      <dt>Scm 5d7</dt>
      <dd><p>I can't find out any good options.
With <code>-b</code>, the first test shows nothing.
With <code>-s /dev/stdin</code>, we always have <q>#&lt;unspecified&gt;.</q>
</p></dd>
      <dt>Scsh 0.6.2</dt>
      <dd><blockquote>
	  <pre><code>scsh -s /dev/stdin</code></pre>
	</blockquote></dd>
      <dt>Sizzle 0.0.31</dt>
      <dd><blockquote>
	  <pre><code>sizzle -s /dev/stdin</code></pre>
	</blockquote></dd>
      <dt>Stklos 0.55</dt>
      <dd><blockquote>
	  <pre><code>stklos</code></pre>
	</blockquote>
<p>Previous versions may require <em>-q</em> option
to be used in a CGI.</p>
</dd>
      <dt>TinyScheme 1.33</dt>
      <dd><blockquote>
	  <pre>scheme /dev/stdin</pre>
	</blockquote>
<p>The path to the initialization file may cause a problem.
Edit the source and specify its absolute path.</p>
</dd>
      <dt>UMB scheme 3.2</dt>
      <dd><p>It does not seem to have a batch mode.
I have found out no way to suppress the banner and prompts.</p></dd>
    </dl>
<hr />
    <div>
<?scm:d (sourceforge-logo)?>
</div>
  </body>
</html>
