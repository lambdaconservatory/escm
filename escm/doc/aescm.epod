<?scm (load "./config-h.scm")?>

=head1 NAME

<?scm:d PACKAGE?> -- preprocess embedded Scheme code in documents

=head1 SYNOPSIS

B<<?scm:d PACKAGE?>> I<[OPTION]> ... I<FILE> ...

=head1 DESCRIPTION

B<<?scm:d (string-titlecase PACKAGE)?>> is a filter program
to preprocess embedded Scheme code in documents.
Conforming to the XML specification about Processing Instructions,
Scheme code between C<E<lt>?scm> and C<?E<gt>> is evaluated
and replaced with what is written to
C<(current-output-port)> while the evaluation.
An expression between C<E<lt>?scm:d> and C<?E<gt>> is evaluated
and replaced with the result.
At least a blank, that is a whitespace, a tab or a newline, is required
after the C<E<lt>?scm> or C<E<lt>?scm:d>.

The first line of each input file is to be skipped
if it begins with C<#>,
for it may be the sharp-bang line of a script.
What seem to be meta-argument lines are also skipped.
But if the input is stdin, the first line is always processed.
The arguments and the meta-arguments in the script file or
the file specified by C<PATH_TRANSLATED> are parsed,
but those of the other files, if any, are simply ignored.

The body of B<<?scm:d PACKAGE?>> is a simple converter
from a text to Scheme code,
which will be evaluated by a backend Scheme interpreter.
It works with most implementations.

This program can be used
as a handler CGI program of Apache web servers
or as if it were an interpreter in a CGI script.
If it is the case,
a content header for HTML will be added
and error messages are to be sent to stdout.

=head2 OPTIONS

=over 2

=item -E

Preprocess files and convert them into a Scheme program.

=item -H

Print no content header even in a CGI script.

=item -e EXPR

Evaluate an expression before processing files.
You can specify this option as many as you want.

=item -f FILENAME

Specify the footer file.  This file will be processed
in the last place.

=item -i 'PROG ARG ...'

Specify the interpreter with its arguments.

=item -l LANG

Specify the interpreter language to be used.
This option is valid
if the tool has been configured with
C<--enable-polyglot> option.

=item -o FILENAME

Specify the output file.

=item -h

Print a short help message.

=item -v

Print version information.

=back

=head2 SCHEME VARIABLES

=over 2

=item E<42>escm-input-fileE<42>

The name of the file which the tool is currently processing.
The value is the false if the input is stdin.

=item E<42>escm-output-fileE<42>

The name of the output file.
It is the false if the output is stdout.

=item E<42>escm-interpreterE<42>

The Scheme interpreter and its arguments.

=item E<42>escm-versionE<42>

The name and the version of this project.

=item GATEWAY_INTERFACE

The value of environment variable B<GATEWAY_INTERFACE>
or the false if it is not defined.
This variable will be used to check whether the script is a CGI or not.

=back

The following variables are defined only when
B<GATEWAY_INTERFACE> is a true.
They are the false
if their corresponding environment variables are not defined.

=over 2

=item QUERY_STRING

The query string.
It is so even if the request method is B<POST>.

=item REQUEST_METHOD

The value of environment variable B<REQUEST_METHOD>.

=item HTTP_HOST

The value of environment variable B<HTTP_HOST>.

=item HTTP_COOKIE

The value of environment variable B<HTTP_COOKIE>.

=item HTTP_ACCEPT_LANGUAGE

The value of environment variable B<HTTP_ACCEPT_LANGUAGE>.

=item HTTP_ACCEPT_CHARSET

The value of environment variable B<HTTP_ACCEPT_CHARSET>.

=item HTTP_REFERER

The value of environment variable B<HTTP_REFERER>.

=item HTTP_USER_AGENT

The value of environment variable B<HTTP_USER_AGENT>.

=back

=head1 ENVIRONMENT

=over 2

=item GATEWAY_INTERFACE

This variable is used to check whether
the tool is invoked in a CGI or not.

=item PATH_TRANSLATED

The file to be processed
when the tool is invoked as a handler CGI program.

=back

=head1 EXAMPLE

=head2 Filter

This man page itself was converted by B<<?scm:d PACKAGE?>> as:

  <?scm:d PACKAGE?> -e "(define *pwd* \"`pwd`\")" aescm.epod > aescm.pod
  pod2man -c "" -r "" aescm.pod > aescm.1

In C<aescm.epod>,
C<config-h.scm> was loaded
which had been converted from C<src/config.h> by an Awk script.
The current working directory was bound to a Scheme variable,
for files to be loaded may have to be specified by their full paths.

=head2 CGI Interpreter

You can use this tool in the sharp-bang line of a CGI script.
This is a simplistic version of a multilingual greeting.
The content header will be automatically added.

  #!/usr/local/bin/<?scm:d PACKAGE?>
  <html><head><title>Hello, world!</title></head>
  <body><p>
  <?scm:d "<?scm:d"?>
     (case (if (not HTTP_ACCEPT_LANGUAGE) 'en
               (string->symbol (substring HTTP_ACCEPT_LANGUAGE 0 2)))
	  ((de) "Guten Tag, alles!")
          ((fr) "Bonjour, tous!")
          ((ja) "Konnichiwa, Minasan!")
          ((oc) "Adieu-siatz, lo monde!")
          (else "Hellow, world!"))
  ?></p>
  </body>

=head2 Handler CGI Program

You can use this tool as a handler CGI program,
if your web administrator allows you to override B<FileInfo> directives.

Copy or hard-link B<<?scm:d PACKAGE?>> to
C<~/public_html/cgi-bin/<?scm:d PACKAGE?>.cgi>.
Then add these lines to your C<.htaccess>.

  AddHandler escm-handler schtml
  Action escm-handler /~YOURNAME/cgi-bin/aescm.cgi

Access to a file suffixed with C<.schtml> will be processed by this tool
and embedded Scheme code will be evaluated.
The file permission is the same as that of other static documents
and you need not to add the sharp-bang line.

=head2 Other Interpreter Languages

B<<?scm:d (string-titlecase PACKAGE)?>>
is designed to be interpreter independent.
This does not mean Scheme interpreter independent.
You can also embed code of most interpreter languages,
e.g. Awk, Csh, Octave, Perl, Python, Ruby, Sh, Tcl.
But you can use this feature
only when you have run C<configure> script with C<--enable-polyglot> option.

Try C<aescm -h> and
check whether a description of C<-l> option appears.

This short example for Awk
will show you a list of the environment variables.

  #!/usr/local/bin/<?scm:d PACKAGE?> \
    -l awk
  <html><head><title>Environment Variables</title></head>
  <body>
  <ul>
  <?awk
    for (key in ENVIRON) {
      print "<li>", key, "=>", ENVIRON[key], "</li>"
    }
  ?>
  </ul>
  </body></html>

=head1 CAVEATS

=over 2

=item *
B<<?scm:d (string-titlecase PACKAGE)?>>
is an experimental version
of B<escm>.
The stable version is B<escm 1.1>.

=item *
A document written in a multibyte character set
may not be correctly processed
by an interpreter which may convert character sets.

=back

=head1 CHANGES

In this section, I will describe differences from
the stable version.

=head2 Syntax

The experimental version has adopted the XML syntax for a preprocessor
as B<eguile> did
and eliminated the archaic one
(C<E<lt>?>, C<E<lt>?=> and C<!E<gt>>).
The syntax for script languages (C<E<lt>%> and C<%E<gt>>)
which can be used in previous experimental versions,
had been also eliminated.

=head2 Options

=over 2

=item -c
Deleted.
It is automatically judged
whether it is invoked in a CGI  or not.

=item -H
Added.
Without this option, a content header for HTML will be automatically
written out in a CGI.

=item -f
Added.

=back

=head2 File Arguments

As many files as you specified are to be processed.
The stable version processes only the first one.

=head2 Meta-Arguments

In place of C<#?> prefix
has been adopted the meta-argument functionality
which was introduced by B<scsh>.
But the syntax is different from that of B<scsh>.

Ours works such as a shell without wildcard expansion,
so that arguments containing strings quoted either by C<'> or
by C<E<quot>> will be treated as we expected.

=head1 AUTHOR

  Shiro Kawai  -- the original and stable B<escm>
  TAGA Yoshitaka, tagga@tsuda.ac.jp

=head1 SEE ALSO

B<escm 1.1> (L<http://www.shiro.dreamhost.com/scheme/vault/escm.html>),
B<eguile> (L<http://woozle.org/~neale/src/eguile/>),
B<brl> (L<http://brl.sourceforge.net/>),
B<scsh> (L<http://scsh.sourceforge.net/>),
B<guile>,
B<gosh>.

=begin html
<hr />
<div>
<?scm:d (sourceforge-logo)?>
</div>

=end html

=cut
