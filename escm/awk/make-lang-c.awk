BEGIN {
  comment = "";
  key = "";
  data["code"] = "";
  data["display"] = "";
  data["command"] = "";
  data["initialization"] = "";
  data["true"] = "";
  data["false"] = "";
  data["define"] = "";
  data["string"] = "";
  data["finalization"] = "";
  flag = 0;
}
$1 == comment {
  key = $2;
  if (! key in data) {
    printf "Unknown key: %s\n", $2;
    exit 1;
  }
}
$1 != comment && key {
  if (data[key]) {
    data[key] = data[key] "\n" $0;
  } else {
    data[key] = $0
  }
}
!comment { # set the comment string
  comment = $1;
}
END {
  for (key in data) {
    if (data[key] == "" && (key != "initialization" && key != "finalization")) {
      print "Record " key " must be present";
      exit 1;
    }
    gsub(/\n/, "\\n", data[key]);
  }
#   const char *name;
  name = data["code"];
  sub(/^.*<\?/, "", name);
  sub(/ .*/, "", name);
  # printf "DEBUG: <<%s>>\n", name;
#   char * const * argv;
  argv = data["command"];
  argv = "\"" argv "\"";
  gsub(/  */, "\", \"", argv);
  # printf "DEBUG: <<%s>>\n", argv;
#   const char * init;
  init = data["initialization"];
  if (init == "") {
    init = "NULL";
  } else {
    init = "\"" init "\"";
  }
  # printf "DEBUG: <<%s>>\n", init;
#   const char * finish;
  finish = data["finalization"];
  if (finish == "") {
    finish = "NULL";
  } else {
    finish = "\"" finish "\"";
  }
  # printf "DEBUG: <<%s>>\n", finish;
#   const char *true;
  true = data["true"];
  # printf "DEBUG: <<%s>>\n", true;
#   const char *false;
  false = data["false"];
  # printf "DEBUG: <<%s>>\n", false;
#   const char *display;
  display = data["display"];
  sub(/.*<\?.*:/, "", display);
  sub(/ .*/, "", display);
  # printf "DEBUG: <<%s>>\n", display;
#   enum escm_varname varname;
  tmp = data["define"];
  if (match(tmp, /variable-name/)) {
    varname = "ESCM_VN_HYPHEN";
  } else if (match(tmp, /VARIABLE_NAME/)) {
    varname = "ESCM_VN_UPPER";
  } else if (match(tmp, /VariableName/)) {
    varname = "ESCM_VN_TITLE";
  } else {
    varname = "ESCM_VN_NOCONV";
  }
  # printf "DEBUG: <<%s>>\n", varname;
#   const char *define_prefix;
  if (! match(tmp, /[Vv][Aa][Rr][Ii][Aa][Bb][Ll][Ee][_-]?[Nn][Aa][Mm][Ee]/)) {
    print "variable_name must be present";
    exit 1;
  }
  from = 1;
  define_prefix = substr(tmp, from, RSTART - from);
  # printf "DEBUG: <<%s>>\n", define_prefix;
#   const char *define_infix;
  from = RSTART + RLENGTH;
  if (! match(tmp, /[Vv][Aa][Ll][Uu][Ee]/)) {
    print "value must be present";
    exit 1;
  }
  define_infix = substr(tmp, from, RSTART - from);
  # printf "DEBUG: <<%s>>\n", define_infix;
#   const char *define_suffix;
  from = RSTART + RLENGTH;
  define_suffix = substr(tmp, from);
  # printf "DEBUG: <<%s>>\n", define_suffix;
#   const char *literal_prefix;
  from = 1;
  tmp = data["string"];
  if (! match(tmp, /\"[Ss][Tt][Rr][Ii][Nn][Gg]\"/)) {
    print "\"string\" must be present";
    exit 1;
  }
  literal_prefix = substr(tmp, from, RSTART - from) "\\\"";
  # printf "DEBUG: <<%s>>\n", literal_prefix;
#   const char *literal_suffix;
  from = RSTART + RLENGTH;
  literal_suffix = "\\\"" substr(tmp, from);
  # printf "DEBUG: <<%s>>\n", literal_suffix;

#   const char *display_prefix;
  from = 1;
  tmp = data["expression"];
  if (! match(tmp, /[Ee][Xx][Pp][Rr][Ee][Ss][Ss][Ii][Oo][Nn]/)) {
    print "expression must be present";
    exit 1;
  }
  display_prefix = substr(tmp, from, RSTART - from);
  gsub(/\\/, "\\\\", display_prefix);
  gsub(/\"/, "\\\"", display_prefix);
  # printf "DEBUG: <<%s>>\n", display_prefix;
#   const char *display_suffix;
  from = RSTART + RLENGTH;
  display_suffix = substr(tmp, from);
  gsub(/\\/, "\\\\", display_suffix);
  gsub(/\"/, "\\\"", display_suffix);
  # printf "DEBUG: <<%s>>\n", display_suffix;
  NAME = toupper(name);

  # make name.c
  print "/* generated by parse.awk */\n";
  print "#include <stdio.h>";
  print "#include \"escm/escm.h\"";
  print "#include \"langconf.h\"";
  print "";
  printf "struct escm_lang escm_%s;\n", name;
  print "";
  printf "#ifdef ESCM_ARGV_%s\n", NAME;
  printf "static char * const %s_argv[] = {ESCM_ARGV_%s, NULL};\n", name, NAME;
  print "#else";
  printf "static char * const %s_argv[] = {%s, NULL};\n", name, argv;
  printf "#endif /* ESCM_ARGV_%s */\n", NAME;
  print "";
  printf "struct escm_lang escm_%s = {\n", name;
  printf "  \"%s\", /* const char *name */\n", name;
  printf "  %s_argv, /* char *const *argv */\n", name;
  printf "  %s, /* const char * init */\n", init;
  printf "  %s, /* const char * finish */\n", finish;
  printf "  \"%s\", /* const char * true */\n", true;
  printf "  \"%s\", /* const char * false */\n", false;
  printf "  \"%s\", /* display */\n", display;
  printf "  %s, /* varname */\n", varname;
  printf "  \"%s\", /* define_prefix */\n", define_prefix;
  printf "  \"%s\", /* define_infix */\n", define_infix;
  printf "  \"%s\", /* define_suffix */\n", define_suffix;
  printf "  \"%s\", /* literal_prefix */\n", literal_prefix;
  printf "  \"%s\", /* literal_suffix */\n", literal_suffix;
  printf "  \"%s\", /* display_prefix */\n", display_prefix;
  printf "  \"%s\", /* display_suffix */\n", display_suffix;
  print "};";
  printf "/* end of %s.c */\n", name;
}
