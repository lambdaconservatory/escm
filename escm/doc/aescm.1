.\" Automatically generated by Pod::Man version 1.15
.\" Thu Feb  5 21:11:42 2004
.\"
.\" Standard preamble:
.\" ======================================================================
.de Sh \" Subsection heading
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Ip \" List item
.br
.ie \\n(.$>=3 .ne \\$3
.el .ne 3
.IP "\\$1" \\$2
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R

.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  | will give a
.\" real vertical bar.  \*(C+ will give a nicer C++.  Capital omega is used
.\" to do unbreakable dashes and therefore won't be available.  \*(C` and
.\" \*(C' expand to `' in nroff, nothing in troff, for use with C<>
.tr \(*W-|\(bv\*(Tr
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" If the F register is turned on, we'll generate index entries on stderr
.\" for titles (.TH), headers (.SH), subsections (.Sh), items (.Ip), and
.\" index entries marked with X<> in POD.  Of course, you'll have to process
.\" the output yourself in some meaningful fashion.
.if \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.\"
.\" For nroff, turn off justification.  Always turn off hyphenation; it
.\" makes way too many mistakes in technical documents.
.hy 0
.if n .na
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.bd B 3
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ======================================================================
.\"
.IX Title "AESCM 1"
.TH AESCM 1 "" "2004-02-05" ""
.UC
.SH "NAME"
aescm \*(-- preprocess embedded Scheme code in documents
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
\&\fBaescm\fR \fI[\s-1OPTION\s0]\fR ... \fI\s-1FILE\s0\fR ...
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
\&\fBAescm\fR is a filter program
to preprocess embedded Scheme code in documents.
Scheme code between \f(CW\*(C`<?scm\*(C'\fR and \f(CW\*(C`?>\*(C'\fR is evaluated
and replaced with what is written to
\&\f(CW\*(C`(current\-output\-port)\*(C'\fR while the evaluation.
An expression between \f(CW\*(C`<?scm:d\*(C'\fR and \f(CW\*(C`?>\*(C'\fR is evaluated
and replaced with its result.
The sharp-bang line and the meta-argument lines (if any)
of a script are skipped.
.PP
The body of \fBaescm\fR is a simple converter
from a text to Scheme code,
which will be evaluated by a backend Scheme interpreter.
It works with most implementations.
.PP
This program can be used
as a handler \s-1CGI\s0 program of Apache web servers
or as if it were an interpreter in a \s-1CGI\s0 script.
If it is the case,
a content header for \s-1HTML\s0 will be added
and error messages are to be sent to stdout.
.Sh "\s-1OPTIONS\s0"
.IX Subsection "OPTIONS"
.Ip "\-E, \-\-no-eval" 2
.IX Item "-E, --no-eval"
Preprocess files and convert them into a Scheme program.
.Ip "\-H, \-\-no-header" 2
.IX Item "-H, --no-header"
Print no content header even in a \s-1CGI\s0 script.
.Ip "\-c, \-\-classic" 2
.IX Item "-c, --classic"
Suppress the content header and send error messages to stdout.
.Ip "\-e, \-\-eval=EXPR" 2
.IX Item "-e, --eval=EXPR"
Evaluate an expression before processing files.
This option can be used as many times as you want.
.Ip "\-f, \-\-footer=FILENAME" 2
.IX Item "-f, --footer=FILENAME"
Specify the footer file.
.Ip "\-h, \-\-header=FILENAME" 2
.IX Item "-h, --header=FILENAME"
Specify the header file.
.Ip "\-i, \-\-interp='\s-1PROG\s0 \s-1ARG\s0 ...'" 2
.IX Item "-i, --interp='PROG ARG ...'"
Specify the interpreter with its arguments.
.Ip "\-l, \-\-language \s-1LANG\s0" 2
.IX Item "-l, --language LANG"
Specify the interpreter language to be used.
This option is valid
if the tool has been configured with
\&\f(CW\*(C`\-\-enable\-polyglot\*(C'\fR option.
.Ip "\-o, \-\-output=FILENAME" 2
.IX Item "-o, --output=FILENAME"
Specify the output file.
.Ip "\*(--help" 2
.IX Item "help"
Print a short help message.
.Ip "\*(--version" 2
.IX Item "version"
Print version information.
.Sh "\s-1SCHEME\s0 \s-1VARIABLES\s0"
.IX Subsection "SCHEME VARIABLES"
.Ip "*escm-input-file*" 2
.IX Item "*escm-input-file*"
The name of the file which the tool is currently processing.
The value is false if the input is stdin.
.Ip "*escm-output-file*" 2
.IX Item "*escm-output-file*"
The name of the output file.
It is false if the output is stdout.
.Ip "*escm-interpreter*" 2
.IX Item "*escm-interpreter*"
The Scheme interpreter and its arguments.
.Ip "*escm-version*" 2
.IX Item "*escm-version*"
The name and the version of this project.
.Ip "*escm-query-string*" 2
.IX Item "*escm-query-string*"
The query string of a \s-1CGI\s0 program.
The request method is either \fB\s-1POST\s0\fR or \fB\s-1GET\s0\fR.
.Sh "\s-1ENVIRONMENT\s0 \s-1VARIABLES\s0"
.IX Subsection "ENVIRONMENT VARIABLES"
.RS 2
.Ip "\s-1GATEWAY_INTERFACE\s0" 2
.IX Item "GATEWAY_INTERFACE"
This variable is used to check whether
the tool is invoked in a \s-1CGI\s0 or not.
.Ip "\s-1PATH_TRANSLATED\s0" 2
.IX Item "PATH_TRANSLATED"
The file to be processed
when the tool is invoked as a handler \s-1CGI\s0 program.
.Ip "\s-1ESCM_DEFAULT\s0" 2
.IX Item "ESCM_DEFAULT"
The default interpreter language.
.Ip "\s-1ESCM_BACKEND\s0" 2
.IX Item "ESCM_BACKEND"
The default backend interpreter.
.RE
.RS 2
.Sh "\s-1HANDLER\s0 \s-1CGI\s0 \s-1PROGRAM\s0"
.IX Subsection "HANDLER CGI PROGRAM"
You can use this tool as a handler \s-1CGI\s0 program,
if your web administrator allows you to override \fBFileInfo\fR directives.
.Sp
Copy or hard-link \fBaescm\fR to
\&\f(CW\*(C`~/public_html/cgi\-bin/aescm.cgi\*(C'\fR.
Then add these lines to your \f(CW\*(C`.htaccess\*(C'\fR.
.Sp
.Vb 2
\&  AddHandler escm-handler escm
\&  Action escm-handler /~YOURNAME/cgi-bin/aescm.cgi
.Ve
Access to a file suffixed with \f(CW\*(C`.escm\*(C'\fR will be processed by this tool
and embedded Scheme code will be evaluated.
.Sh "\s-1OTHER\s0 \s-1INTERPRETER\s0 \s-1LANGUAGES\s0"
.IX Subsection "OTHER INTERPRETER LANGUAGES"
\&\fBAescm\fR
is designed to be interpreter independent.
This does not mean Scheme interpreter independent.
You can also embed code of most interpreter languages,
e.g. Awk, Csh, Common Lisp, Perl, Python, Ruby, Sh, Tcl.
But you can use this feature
only when you have run \f(CW\*(C`configure\*(C'\fR script with \f(CW\*(C`\-\-enable\-polyglot\*(C'\fR option.
.Sp
This short example for Awk
will show you a list of the environment variables.
.Sp
.Vb 12
\&  #!/usr/local/bin/aescm \e
\&    -l awk
\&  <html><head><title>Environment Variables</title></head>
\&  <body>
\&  <ul>
\&  <?awk
\&    for (key in ENVIRON) {
\&      print "<li>", key, "=>", ENVIRON[key], "</li>"
\&    }
\&  ?>
\&  </ul>
\&  </body></html>
.Ve
.SH "CAVEATS"
.IX Header "CAVEATS"
.RS 2
.RE
.Ip "\(bu \fBAescm\fR is developers' version of \fBescm\fR. The stable version is still \fBescm 1.1\fR." 2
.IX Item "Aescm is developers' version of escm. The stable version is still escm 1.1."
.PD 0
.Ip "\(bu \fBAescm\fR may generate a very long string. Make it sure that your interpreter might not have buffer overflow bugs." 2
.IX Item "Aescm may generate a very long string. Make it sure that your interpreter might not have buffer overflow bugs."
.Ip "\(bu A document written in a multibyte character set may not be correctly processed by an interpreter which may convert character sets." 2
.IX Item "A document written in a multibyte character set may not be correctly processed by an interpreter which may convert character sets."
.RE
.RS 2
.PD
.SH "CHANGES"
.IX Header "CHANGES"
In this section, I will describe differences from
the stable version.
.Sh "Syntax"
.IX Subsection "Syntax"
The experimental version has adopted the \s-1XML\s0 syntax for a preprocessor
as \fBeguile\fR did
and eliminated the archaic one
with \f(CW\*(C`<?\*(C'\fR, \f(CW\*(C`<?=\*(C'\fR and \f(CW\*(C`!>\*(C'\fR.
.Sh "Options"
.IX Subsection "Options"
.RS 2
.RE
.Ip "\-H Added. Without this option, a content header for \s-1HTML\s0 will be automatically written out in a \s-1CGI\s0." 2
.IX Item "-H Added. Without this option, a content header for HTML will be automatically written out in a CGI."
.PD 0
.Ip "\-f Added." 2
.IX Item "-f Added."
.RE
.RS 2
.PD
.Sh "File Arguments"
.IX Subsection "File Arguments"
As many files as you specified are to be processed.
The stable version processes only the first one.
.Sh "Meta-Arguments"
.IX Subsection "Meta-Arguments"
In place of \f(CW\*(C`#?\*(C'\fR prefix
has been adopted the meta-argument functionality
which was introduced by \fBscsh\fR.
But the syntax is different from that of \fBscsh\fR.
.Sp
Ours works such as a shell without wildcard expansion,
so that arguments containing strings quoted either by \f(CW\*(C`'\*(C'\fR or
by \f(CW\*(C`"\*(C'\fR will be treated as we expected.
.SH "AUTHOR"
.IX Header "AUTHOR"
.Vb 2
\&  Shiro Kawai  -- the original and stable escm
\&  TAGA Yoshitaka, tagga@tsuda.ac.jp
.Ve
.SH "SEE ALSO"
.IX Header "SEE ALSO"
\&\fBescm 1.1\fR (http://www.shiro.dreamhost.com/scheme/vault/escm.html),
\&\fBeguile\fR (http://woozle.org/~neale/src/eguile/),
\&\fBbrl\fR (http://brl.sourceforge.net/),
\&\fBscsh\fR (http://scsh.sourceforge.net/),
\&\fBguile\fR,
\&\fBgosh\fR,
\&\fB2aescm\fR.
